package fluid_modes;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class Display extends JPanel implements ActionListener {
		
	private double dt = 1;
	private int perturbationMode;
	
	// Elements
	private Element element;
	private Mode mode;
	
	// Constants
	private final int MIN_RATE = 10;
	private final int MAX_RATE = 200;
	private final int INIT_RATE = 50;
	
	private final int MIN_MODE = 1;
	private final int MAX_MODE = 30;
	private final int INIT_MODE = 4;
	
	// Display Properties
	public final int WIDTH = 600;
	public final int HEIGHT = 600;
	
	private final int solarRadius = 40;
	public final int orbitalRadius = 225;
	
	// Timer
	private Timer timer;
	
	// Swing Components
	private JButton start;
	private JButton stop;
	private JSlider rateChoice; // rate of updates
	private JSlider modeChoice; // mode of fluid
	
	public Display() {
		// Fluid Elements
		initElement();
		initMode(INIT_MODE);
		
		this.initDisplay();
	}
	
	private void initElement() {
		this.element = new Element(orbitalRadius, 0, this);
	}
	
	private void initMode(int mode_number) {
		double angle = 0;
		this.mode = new Mode(mode_number, angle, this);
	}
	
	private void initDisplay() {
		// Display Properties
		setBackground(Color.BLACK);
        setPreferredSize(new Dimension(WIDTH, HEIGHT));
        setDoubleBuffered(true);
        
		// Swing Components
        this.start = new JButton("Start");
        start.addActionListener( 
        		new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						timer.start();
					}
        		});
        add(start);
        
        this.stop = new JButton("Stop");
        stop.addActionListener( 
        		new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						timer.stop();
					}
        		});
        add(stop);
        
		this.rateChoice = new JSlider(JSlider.HORIZONTAL, MIN_RATE, MAX_RATE, INIT_RATE);
		rateChoice.addChangeListener( 
        		new ChangeListener() {
					public void stateChanged(ChangeEvent e) {
						if (!rateChoice.getValueIsAdjusting()) {
							// only change rate if the slider is fixed
							int new_rate = rateChoice.getValue();
							timer.setDelay(new_rate);
						}
					}
        		});
		add(rateChoice);
		
		this.modeChoice = new JSlider(JSlider.HORIZONTAL, MIN_MODE, MAX_MODE, INIT_MODE);
		modeChoice.addChangeListener( 
        		new ChangeListener() {
					public void stateChanged(ChangeEvent e) {
						if (!modeChoice.getValueIsAdjusting()) {
							// only change rate if the slider is fixed
							int newMode = modeChoice.getValue();
							if (newMode != perturbationMode) {
								switchMode(newMode);
								perturbationMode = newMode;
							}
							
						}
					}
        		});
		add(modeChoice);
		
		// Timer
		this.timer = new Timer(INIT_RATE, this); // 'this' is this class as an ActionListener
        //this.timer.start();
	}
	
	public void switchMode(int m) {
		initMode(m);
	}
	
	public void rotateElements() {
		double rotationAngle = rateChoice.getValue() * dt;
		
		// Element
		element.rotate(rotationAngle);
		// Mode
		Blob[] blobs = mode.getBlobs();
		for (int i = 0; i < blobs.length; i++) {
			Blob b = blobs[i];
			b.rotate(rotationAngle);
		}
	}
	
	public void drawSun(Graphics2D g) {
		int radius = this.solarRadius;
		int diameter = 2 * radius;
		g.setColor(Color.YELLOW);
		g.fillOval(WIDTH / 2 - radius, HEIGHT / 2 - radius, diameter, diameter);
	}
	
    public void drawOrbit(Graphics2D g) {
    	int radius = this.orbitalRadius;
    	int diameter = 2 * radius;
    	g.setColor(Color.WHITE);
		g.drawOval(WIDTH / 2 - radius, HEIGHT / 2 - radius, diameter, diameter);
	}
    
    public void drawElement(Graphics2D g) {
		int radius = this.element.getRadius();
		int diameter = 2 * radius;
		
		int displayX = (int)this.element.currentX + (this.WIDTH / 2);
		int displayY = (int)this.element.currentY + (this.HEIGHT / 2);
		
		g.setColor(Color.GRAY);
		g.fillOval(displayX - radius, displayY - radius, diameter, diameter);
	}
	
	public void paintComponent(Graphics g) {
        super.paintComponent(g);
        
        Graphics2D g2d = (Graphics2D) g;
        
        this.drawSun(g2d);
        this.drawOrbit(g2d);
        
        this.drawElement(g2d);
        //this.drawMode(g2d);
        
        Toolkit.getDefaultToolkit().sync();
    }

	@Override
	public void actionPerformed(ActionEvent ae) {
		this.rotateElements();
		
		repaint();
	}
	
	
}
